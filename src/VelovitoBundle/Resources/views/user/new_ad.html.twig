{% extends 'VelovitoBundle::base.html.twig' %}
{% import '@Velovito/templates/macroses.html.twig' as macro %}
{% block body %}
    <script src="{{ asset('js/jquery.form.min.js') }}"></script>
    <script src="{{ asset('js/spinner.js') }}"></script>

    {{ form_start(form) }}
    {{ macro.bootstrapFormInput(form.title) }}
    {{ macro.bootstrapFormInput(form.price) }}
    {{ macro.bootstrapFormInput(form.category) }}
    {{ macro.bootstrapFormInput(form.status) }}
    {{ macro.bootstrapFormInput(form.description) }}

    <div id="images_pool">
        <div class="uploading_image" id='root_uploading_image' style="display: none;">
            <span id="promo_spin" class="promo__spin"></span>
            <input type="hidden" name="new_ad[photos][__name__]">
            <img src="" alt="">

            <div class="remove_image">
                <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
            </div>
        </div>
    </div>

    {{ form_widget(form.save) }}
    {{ form_widget(form.publish) }}
    {{ form_rest(form) }}
    {{ form_end(form) }}

    <br/>

    {{ form_start(uploadForm, {'attr':{ 'id': 'photo' }}) }}
    {{ form_widget(uploadForm.photo) }}
    {{ form_end(uploadForm) }}

    <br/>

    <script>
        var spinner = new Spinner(dockerSpinnerSettings).spin($('#promo_spin')[0]);
        var tmpImagePath = '{{ app.request.getSchemeAndHttpHost() }}/img/temporary_thumbs/';
        var _ajaxImageUploadForm = $("#photo");
        var _ajaxImageUploadInput = $('#upload_photo_form_photo');
        var _rootUploadingImage = $('#root_uploading_image');

        _ajaxImageUploadInput.change(ajaxUploadFile);

        function ajaxUploadFile() {
            var element = createUploadingImageBlock();

            ajaxPostForm(
                    _ajaxImageUploadForm,
                    onBeforeSubmit,
                    function (responseText, statusText, xhr, $form) {
                        onSuccessUpload(element, responseText, xhr)
                    }
            );
        }

        function onSuccessUpload(element, responseText, xhr) {
            element.find('.promo__spin').hide();

            switch (xhr.status) {
                case 200:
                    element.find('img').attr('src', tmpImagePath + responseText);
                    break;

                default :
                    console.log(xhr);
            }
        }

        function duplicateElement(element) {
            return element.clone().appendTo(element.parent())
        }

        function createUploadingImageBlock() {
            var element = duplicateElement(_rootUploadingImage);
            element.removeAttr('id');
            element.show('fast');

            return element;
        }

        function ajaxPostForm(form, beforeSubmit, success) {
            form.ajaxSubmit({
                url: '{{ url('ajax_upload_photo') }}',
                type: 'post',
                beforeSubmit: beforeSubmit,
                success: success
            });
        }

        function onBeforeSubmit(formData, jqForm, options) {
            var queryString = $.param(formData);
            console.log('About to submit: \n\n' + queryString);

            return true;
        }

        var client = new XMLHttpRequest();

        function upload() {
            var file = document.getElementById("uploadfile");

            var formData = new FormData();
            formData.append("upload", file.files[0]);

            client.open("post", "{{ url('ajax_upload_photo') }}", true);
            client.setRequestHeader("Content-Type", "multipart/form-data");
            client.send(formData);
        }

        client.onreadystatechange = function () {
            if (client.readyState == 4 && client.status == 200) {
                alert(client.statusText);
            }
        }
    </script>
{% endblock %}